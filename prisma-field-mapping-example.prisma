// Example Prisma Schema - Field Mapping Strategy Demo
// Generated using the validated field mapping prototype

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Valid fields (no transformation needed)
  authentication Json?
  visit          Int?

  // Transformed fields (camelCase + @map)
  modifiedDate       DateTime? @map("Modified Date")
  dealership         String?   @map("Dealership")
  checkInReportToday String?   @map("check in report today")
  profilePicture     String?   @map("Profile Picture")
  accessLevel        Json?     @map("Access Level")
  usersignedup       Boolean?  @map("user_signed_up")
  linkedAgentProfile String?   @map("Linked Agent Profile")
  createdDate        DateTime? @map("Created Date")

  // Reserved words (suffix added)
  idField   String @id @map("_id")
  typeField String? @map("Type")
  dataField String? @map("data")

  // Special characters stripped
  lockedPackage   Boolean? @map("Locked Package?")
  commissionPaid  Boolean? @map("Commission Paid?")
  special         Boolean? @map("Special?")

  // Numeric start fields (f prefix)
  f2ndPayment     Float? @map("2nd Payment %")
  f1stPayment     Float? @map("1st Payment %")
  f1stPaymentDate DateTime? @map("1st Payment Date")

  // Collision resolution (numeric suffix)
  active  Boolean? @map("Active")
  active1 Boolean? @map("Active?")  // Auto-deduplicated

  // Edge cases handled
  field_c70353 String? @map("")      // Empty field name
  field_4041dc String? @map("   ")   // Whitespace only
  f123         String? @map("123")    // Numeric only

  // Non-ASCII characters
  emojis String? @map("Ã©mojis_ðŸš€")  // Accents/emojis removed
  field_aa3643 String? @map("ä¸­æ–‡å­—æ®µ")  // Non-Latin fallback

  // Long names truncated
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa String? 
    @map("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
  
  @@map("user")
}

model Invoice {
  idField String @id @map("_id")
  
  // Financial fields
  invoiceId              Int?      @map("Invoice ID")
  amount                 Float?    @map("Amount")
  stampCashPrice         Float?    @map("Stamp Cash Price")
  percentOfTotalAmount   Float?    @map("Percent of Total Amount")
  normalCommission       Float?    @map("Normal Commission")
  amountEligibleForComm  Float?    @map("Amount Eligible for Comm")
  
  // Date fields
  invoiceDate       DateTime? @map("Invoice Date")
  fullPaymentDate   DateTime? @map("Full Payment Date")
  createdDate       DateTime? @map("Created Date")
  modifiedDate      DateTime? @map("Modified Date")
  
  // Status and metadata
  approvalStatus          String?   @map("Approval Status")
  stockStatusInv          String?   @map("Stock Status INV")
  paid                    Boolean?  @map("Paid?")
  needApproval            Boolean?  @map("Need Approval")
  eligibleAmountDescription String? @map("Eligible Amount Description")
  
  // Relationships (using Prisma-safe field names)
  linkedStockTransaction Json?     @map("Linked Stock Transaction")
  linkedAgreement        String?   @map("Linked Agreement") 
  linkedPayment          Json?     @map("Linked Payment")
  linkedCustomer         String?   @map("Linked Customer")
  linkedPackage          String?   @map("Linked Package")
  linkedAgent            String?   @map("Linked Agent")
  linkedInvoiceItem      Json?     @map("Linked Invoice Item")
  
  // Performance tracking
  performanceTierMonth Int? @map("Performance Tier Month")
  performanceTierYear  Int? @map("Performance Tier Year")
  
  // Audit fields
  createdBy String? @map("Created By")
  logs      String? @map("Logs")
  version   Int?    @map("Version")
  panelQty  Int?    @map("Panel Qty")
  
  @@map("invoice")
}

// This schema demonstrates:
// 1. âœ… All field names are valid Prisma identifiers
// 2. âœ… Original Bubble field names preserved via @map
// 3. âœ… Perfect round-trip compatibility
// 4. âœ… Collision handling with numeric suffixes
// 5. âœ… Reserved word avoidance with Field suffixes
// 6. âœ… Numeric field names prefixed with 'f'
// 7. âœ… Special characters safely stripped
// 8. âœ… Non-ASCII fallback names for unsupported characters
// 9. âœ… Long field names properly truncated
// 10. âœ… Ready for production use with no manual intervention needed
