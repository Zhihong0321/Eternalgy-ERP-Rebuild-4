# PROJECT SPECIFICATION MEMORY
## Core Objective
- Create real-time, read-only mirror of Bubble.io application data → PostgreSQL database
- Node.js backend + React/shadcn/ui frontend
- Hosted exclusively on Railway.app

## Non-Negotiable Principles
- Bubble is Single Source of Truth - local ERP data always overwritten by Bubble
- Unidirectional Sync - data flows ONLY Bubble → ERP, never back
- Single User System - no authentication/multi-user features
- Dynamic Discovery Mandatory - NO hardcoded table/field names
- Railway-First Development - all dev/testing/deployment on Railway only

## Architecture Authority - UPDATED BASED ON FAILURE ANALYSIS
- Core sync logic defined in `bubble-sync-v3-psd.md` (lessons from 7-day failure)
- Bubble API manual provides real API data patterns
- PSD document is absolute authority on what NOT to do
- Ultra-simple approach: Bubble.io API → Prisma Schema → PostgreSQL

## Current Project State (10 Aug 2025)
- Phase: Step 1 - Bubble API Data Fetching Foundation
- **CRITICAL**: User has 52+ data types, NEVER hardcode counts
- API Key: ✅ Available b870d2b5ee6e6b39bcf99409c59c9e02 
- Infrastructure: ✅ Complete (Railway + GitHub + PostgreSQL)
- **Current Priority**: Dynamic discovery + selective fetching endpoints
- Production URL: https://eternalgy-erp-retry3-production.up.railway.app

## Project Context - TEMPORARY MIGRATION TOOL
- **Purpose**: One-time data migration from Bubble to new ERP system
- **Usage**: Limited sync during ERP 2.0 development, then full sync before launch
- **Retirement**: Bubble ERP will be retired after new ERP launch
- **Approach**: Simple API endpoints for easy testing and debugging

## Technology Stack
- Frontend: TypeScript + React 18 + Vite + shadcn/ui + Tailwind CSS
- Backend: Node.js + Express + Prisma ORM
- Database: PostgreSQL (Railway add-on)
- Build: pnpm
- Hosting: Railway.app only
- CI/CD: Automatic deployment from GitHub

## Build Phases
1. Setup & API Validation
2. Database & Sync Engine 
3. Frontend UI

## Success Criteria
- Real-time sync Bubble → PostgreSQL
- Dynamic schema discovery/generation
- No local development/testing
- Railway deployment working end-to-end
